import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  EditorView,
  HighlightStyle,
  syntaxHighlighting,
  tags
} from "./chunk-L25KTKET.js";
import "./chunk-V4OQ3NZ2.js";

// node_modules/@uiw/codemirror-themes/esm/index.js
var createTheme = (_ref) => {
  var {
    theme,
    settings = {},
    styles = []
  } = _ref;
  var themeOptions = {
    ".cm-gutters": {}
  };
  var baseStyle = {};
  if (settings.background) {
    baseStyle.backgroundColor = settings.background;
  }
  if (settings.backgroundImage) {
    baseStyle.backgroundImage = settings.backgroundImage;
  }
  if (settings.foreground) {
    baseStyle.color = settings.foreground;
  }
  if (settings.fontSize) {
    baseStyle.fontSize = settings.fontSize;
  }
  if (settings.background || settings.foreground) {
    themeOptions["&"] = baseStyle;
  }
  if (settings.fontFamily) {
    themeOptions["&.cm-editor .cm-scroller"] = {
      fontFamily: settings.fontFamily
    };
  }
  if (settings.gutterBackground) {
    themeOptions[".cm-gutters"].backgroundColor = settings.gutterBackground;
  }
  if (settings.gutterForeground) {
    themeOptions[".cm-gutters"].color = settings.gutterForeground;
  }
  if (settings.gutterBorder) {
    themeOptions[".cm-gutters"].borderRightColor = settings.gutterBorder;
  }
  if (settings.caret) {
    themeOptions[".cm-content"] = {
      caretColor: settings.caret
    };
    themeOptions[".cm-cursor, .cm-dropCursor"] = {
      borderLeftColor: settings.caret
    };
  }
  var activeLineGutterStyle = {};
  if (settings.gutterActiveForeground) {
    activeLineGutterStyle.color = settings.gutterActiveForeground;
  }
  if (settings.lineHighlight) {
    themeOptions[".cm-activeLine"] = {
      backgroundColor: settings.lineHighlight
    };
    activeLineGutterStyle.backgroundColor = settings.lineHighlight;
  }
  themeOptions[".cm-activeLineGutter"] = activeLineGutterStyle;
  if (settings.selection) {
    themeOptions["&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection"] = {
      background: settings.selection + " !important"
    };
  }
  if (settings.selectionMatch) {
    themeOptions["& .cm-selectionMatch"] = {
      backgroundColor: settings.selectionMatch
    };
  }
  var themeExtension = EditorView.theme(themeOptions, {
    dark: theme === "dark"
  });
  var highlightStyle = HighlightStyle.define(styles);
  var extension = [themeExtension, syntaxHighlighting(highlightStyle)];
  return extension;
};

// node_modules/@uiw/codemirror-theme-okaidia/esm/index.js
var defaultSettingsOkaidia = {
  background: "#272822",
  foreground: "#FFFFFF",
  caret: "#FFFFFF",
  selection: "#49483E",
  selectionMatch: "#49483E",
  gutterBackground: "#272822",
  gutterForeground: "#FFFFFF70",
  lineHighlight: "#0000003b"
};
var okaidiaDarkStyle = [
  {
    tag: [tags.comment, tags.documentMeta],
    color: "#8292a2"
  },
  {
    tag: [tags.number, tags.bool, tags.null, tags.atom],
    color: "#ae81ff"
  },
  {
    tag: [tags.attributeValue, tags.className, tags.name],
    color: "#e6db74"
  },
  {
    tag: [tags.propertyName, tags.attributeName],
    color: "#a6e22e"
  },
  {
    tag: [tags.variableName],
    color: "#9effff"
  },
  {
    tag: [tags.squareBracket],
    color: "#bababa"
  },
  {
    tag: [tags.string, tags.special(tags.brace)],
    color: "#e6db74"
  },
  {
    tag: [tags.regexp, tags.className, tags.typeName, tags.definition(tags.typeName)],
    color: "#66d9ef"
  },
  {
    tag: [tags.definition(tags.variableName), tags.definition(tags.propertyName), tags.function(tags.variableName)],
    color: "#fd971f"
  },
  // { tag: t.keyword, color: '#f92672' },
  {
    tag: [tags.keyword, tags.definitionKeyword, tags.modifier, tags.tagName, tags.angleBracket],
    color: "#f92672"
  }
];
var okaidiaInit = (options) => {
  var {
    theme = "dark",
    settings = {},
    styles = []
  } = options || {};
  return createTheme({
    theme,
    settings: _extends({}, defaultSettingsOkaidia, settings),
    styles: [...okaidiaDarkStyle, ...styles]
  });
};
var okaidia = okaidiaInit();
export {
  defaultSettingsOkaidia,
  okaidia,
  okaidiaDarkStyle,
  okaidiaInit
};
//# sourceMappingURL=@uiw_codemirror-theme-okaidia.js.map
